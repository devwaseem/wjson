[tool.poetry]
name = "json-parser"
version = "0.1.0"
description = ""
authors = ["None"]
readme = "README.md"

[tool.poetry.dependencies]
python = "3.13"
orjson = "^3.10.12"


[tool.poetry.group.dev.dependencies]
coverage = "^7.6.9"
debugpy = "^1.8.9"
mypy = "^1.13.0"
pytest = "^8.3.4"
ruff = "^0.8.2"
pytest-cov = "^6.0.0"
hypothesis = "^6.122.3"
pytest-sugar = "^1.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.basedpyright]
include = ["src", "llm_toolkit"]
venvPath = "./.venv"
pythonVersion = "3.12"
pythonPlatform = "Linux"
typeCheckingMode = "off"

reportMissingTypeStubs = false
reportIncompatibleVariableOverride = false
reportUnusedParameter = false


[tool.djlint]
custom_html = "mjml,mj-head,mj-\\w+,c-\\w+,c-\\w{\\.\\w+}*"


[tool.mypy]

# https://mypy.readthedocs.io/en/stable/config_file.html

python_version = "3.12"
mypy_path = "."


plugins = ["mypy_django_plugin.main", "mypy_drf_plugin.main"]

exclude = ['manage.py']

disable_error_code = ['import-untyped']


allow_redefinition = false
check_untyped_defs = true
disallow_any_explicit = false
disallow_any_generics = true
disallow_any_unimported = false
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
error_summary = true
# explicit_package_bases = true
ignore_errors = false
ignore_missing_imports = false
implicit_reexport = false
local_partial_types = true
no_implicit_optional = true
pretty = true
show_error_codes = true
show_error_context = true
strict = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.mypy_django_plugin]
ignore_missing_model_attributes = true

[tool.django-stubs]
module = "django-stubs"
django_settings_module = "src.server.settings"

[[tool.mypy.overrides]]
module = "*.migrations.*"
# Django migrations should not produce any errors:
ignore_errors = true


[tool.ruff]

exclude = [
    "*.egg",
    "*/migrations/*.py",
    ".bzr",
    ".cache",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".local",
    ".mypy_cache",
    ".nox",
    ".npm",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pycache__",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "manage.py",
    "node_modules",
    "site-packages",
    "venv",
]

extend-select = [
    "A", # flake8-builtins
    # flake8-annotations - https://docs.astral.sh/ruff/rules/#flake8-annotations-ann
    "ANN001",
    "ANN002",
    "ANN003",
    "ANN201",
    "ANN202",
    "ANN204",
    "ANN205",
    "ANN206",
    "ARG",    # flake8-unused-arguments (ARG)
    "ASYNC",  # flake8-async (ASYNC)
    "B",      # flake8-bugbear
    "BLE",    # flake8-blind-except
    "C4",     # flake8-comprehensions (C4)
    "C90",    # mccabe (C90)
    "DJ",     # flake8-django
    "DTZ",    # flake8-datetimez (DTZ)
    "E",      # pycodestyle Error
    "ERA",    # eradicate (ERA)
    "F",      # Pyflakes
    "FBT",    # flake8-boolean-trap (FBT)
    "FIX",    # flake8-fixme (FIX)
    "FURB",   # refurb (FURB)
    "G",      # flake8-logging-format
    "I",      # isort
    "ICN",    # flake8-import-conventions
    "LOG",    # flake8-logging (LOG)
    "N",      # pep8-naming
    "PERF",   # Perflint (PERF)
    "PIE",    # flake8-pie
    "PTH",    # flake8-use-pathlib (PTH)
    "PYI",    # flake8-pyi
    "Q",      # flake8-quotes
    "RET",    # flake8-return (RET)
    "RSE",    # flake8-raise (RSE)
    "RUF",    # Ruff-specific rules (RUF)
    "SIM",    # flake8-simplify
    "SLF",    # flake8-self (SLF)
    "T10",    # flake8-debugger (T10)
    "T20",    # flake8-print
    # "TD",    # flake8-todos (TD)
    "TID", # flake8-tidy-imports (TID)
    "TRY", # tryceratops (TRY)
    "W",   # pycodestyle Warning
    # "D",     # pydocstyle (D)
    "FLY",  # flynt (FLY)
    "SLOT", #flake8-slots
]
ignore = [
    "D100", # undocumented-public-module
    "D104", # undocumented-public-package
    # "D203",   # one-blank-line-before-class
    "D212",   # multi-line-summary-first-line
    "RUF012", # mutable-class-default
    "TRY003", # raise-vanilla-args
    'A003',   # builtin-attribute-shadowing
]

line-length = 79
indent-width = 4

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# select = ["E4", "E7", "E9", "F"]
# ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.isort]

known-first-party = ["src"]

known-third-party = ["src"]


[tool.ruff.lint.per-file-ignores]

"**/{tests,docs,tools}/*" = ["E402", "E501"]

[tool.pytest.ini_options]
addopts = [
    '--tb=native',
    '--color=yes',
    '--strict-markers',
    '--strict-config',
    # '--durations=0',
    # '--durations-min=0.5',
    '--cov=.',
    '--cov-report=html',
    '--cov-config=pyproject.toml',
    # '--doctest-modules',
    # '--cov-report=term',
]

markers = [
    "unit: mark as Unit Tests",
    "integration: mark as Integration",
    "e2e: mark as End to End",
    "slow: mark test as slow.",
]

[tool.pytest_env]
TEST = true
LOG_DB = true
DISABLE_LOGGING = true
DEBUG = false


[tool.coverage.run]
branch = true
disable_warnings = ["no-data-collected"]


[tool.coverage.report]
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",
    "if TYPE_CHECKING",
    "if DEBUG",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",

    # Skip any pass lines such as may be used for @abstractmethod
    "pass",

    # Have to re-enable the standard pragma
    "pragma: no cover",
]
